/*
    ResponseEntity<response> as a response without a clear obj is less secure and may complicate the use and maintenance of the API.

    ResponseEntity<ApiResponse<List<CategoryDTO>>> makes the returned data type clear and makes the code more readable and maintainable.
*/


/*
    在 ResponseEntity 的构建过程中，顺序是很重要的，
    因为每个方法调用都会返回一个新的 ResponseEntity.Builder 实例，并且这个实例会依赖之前的设置。
    因此，调用的顺序需要遵循下面的逻辑：
    状态码设置 (status())：这是最基础的，通常最先调用，因为它会定义响应的 HTTP 状态码。
    添加头部 (header())：在设置状态码后，可以添加头部信息。
    设置响应体 (body())：最后调用 body() 来设置响应体，body() 一旦调用，构建器就会返回一个完整的 ResponseEntity，因此它应该是最后一步。
    换句话说，body() 方法必须是最后调用的，因为它完成了 ResponseEntity 的构建。
*/


/*
    Browsers block cross-origin requests by default to prevent security risks
    CORS (Cross-Origin Resource Sharing) allows servers to explicitly permit certain origins, methods, or headers, by unlocking safe cross-origin interactions.
    @CrossOrigin("http://localhost:8080*")// ( * )  all porto
*/



/*
    @RequestMapping(
            value = "/api/",
            produces = {MediaType.APPLICATION_JSON_VALUE,MediaType.APPLICATION_XML_VALUE})// will have 2 types of results based on header request
*/

q www q www s ww ss www ss w